// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cnt_grpc.proto

/*
Package cnt is a generated protocol buffer package.

It is generated from these files:
	cnt_grpc.proto

It has these top-level messages:
	CntRq
	CntRp
*/
package cnt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 请求
type CntRq struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Num string `protobuf:"bytes,2,opt,name=num" json:"num,omitempty"`
}

func (m *CntRq) Reset()                    { *m = CntRq{} }
func (m *CntRq) String() string            { return proto.CompactTextString(m) }
func (*CntRq) ProtoMessage()               {}
func (*CntRq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CntRq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *CntRq) GetNum() string {
	if m != nil {
		return m.Num
	}
	return ""
}

// 响应
type CntRp struct {
	Errcode string `protobuf:"bytes,3,opt,name=errcode" json:"errcode,omitempty"`
	Errmsg  string `protobuf:"bytes,4,opt,name=errmsg" json:"errmsg,omitempty"`
	Num     string `protobuf:"bytes,5,opt,name=num" json:"num,omitempty"`
}

func (m *CntRp) Reset()                    { *m = CntRp{} }
func (m *CntRp) String() string            { return proto.CompactTextString(m) }
func (*CntRp) ProtoMessage()               {}
func (*CntRp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CntRp) GetErrcode() string {
	if m != nil {
		return m.Errcode
	}
	return ""
}

func (m *CntRp) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *CntRp) GetNum() string {
	if m != nil {
		return m.Num
	}
	return ""
}

func init() {
	proto.RegisterType((*CntRq)(nil), "cnt.CntRq")
	proto.RegisterType((*CntRp)(nil), "cnt.CntRp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Counter service

type CounterClient interface {
	// 计数器自增
	// @uid:用户编号
	// @num:需要增加的计数值
	Add(ctx context.Context, in *CntRq, opts ...grpc.CallOption) (*CntRp, error)
	// 计数器删除
	// @uid:用户编号
	Del(ctx context.Context, in *CntRq, opts ...grpc.CallOption) (*CntRp, error)
	// 计数器值获取
	// @uid:用户编号
	// @return: num
	Get(ctx context.Context, in *CntRq, opts ...grpc.CallOption) (*CntRp, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) Add(ctx context.Context, in *CntRq, opts ...grpc.CallOption) (*CntRp, error) {
	out := new(CntRp)
	err := grpc.Invoke(ctx, "/cnt.Counter/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) Del(ctx context.Context, in *CntRq, opts ...grpc.CallOption) (*CntRp, error) {
	out := new(CntRp)
	err := grpc.Invoke(ctx, "/cnt.Counter/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) Get(ctx context.Context, in *CntRq, opts ...grpc.CallOption) (*CntRp, error) {
	out := new(CntRp)
	err := grpc.Invoke(ctx, "/cnt.Counter/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Counter service

type CounterServer interface {
	// 计数器自增
	// @uid:用户编号
	// @num:需要增加的计数值
	Add(context.Context, *CntRq) (*CntRp, error)
	// 计数器删除
	// @uid:用户编号
	Del(context.Context, *CntRq) (*CntRp, error)
	// 计数器值获取
	// @uid:用户编号
	// @return: num
	Get(context.Context, *CntRq) (*CntRp, error)
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CntRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnt.Counter/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).Add(ctx, req.(*CntRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CntRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnt.Counter/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).Del(ctx, req.(*CntRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CntRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnt.Counter/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).Get(ctx, req.(*CntRq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cnt.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Counter_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Counter_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Counter_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cnt_grpc.proto",
}

func init() { proto.RegisterFile("cnt_grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0x2b, 0x89,
	0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xce, 0x2b, 0x51,
	0xd2, 0xe6, 0x62, 0x75, 0xce, 0x2b, 0x09, 0x2a, 0x14, 0x12, 0xe0, 0x62, 0x2e, 0xcd, 0x4c, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x41, 0x22, 0x79, 0xa5, 0xb9, 0x12, 0x4c, 0x10,
	0x91, 0xbc, 0xd2, 0x5c, 0x25, 0x6f, 0x88, 0xe2, 0x02, 0x21, 0x09, 0x2e, 0xf6, 0xd4, 0xa2, 0xa2,
	0xe4, 0xfc, 0x94, 0x54, 0x09, 0x66, 0xb0, 0x34, 0x8c, 0x2b, 0x24, 0xc6, 0xc5, 0x96, 0x5a, 0x54,
	0x94, 0x5b, 0x9c, 0x2e, 0xc1, 0x02, 0x96, 0x80, 0xf2, 0x60, 0x86, 0xb1, 0xc2, 0x0d, 0x33, 0x4a,
	0xe3, 0x62, 0x77, 0xce, 0x2f, 0xcd, 0x2b, 0x49, 0x2d, 0x12, 0x92, 0xe5, 0x62, 0x76, 0x4c, 0x49,
	0x11, 0xe2, 0xd2, 0x4b, 0xce, 0x2b, 0xd1, 0x03, 0x3b, 0x47, 0x0a, 0xc1, 0x2e, 0x00, 0x49, 0xbb,
	0xa4, 0xe6, 0xe0, 0x93, 0x76, 0x4f, 0x2d, 0xc1, 0x25, 0x9d, 0xc4, 0x06, 0xf6, 0xad, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0xe0, 0x04, 0xb1, 0xff, 0x00, 0x00, 0x00,
}
